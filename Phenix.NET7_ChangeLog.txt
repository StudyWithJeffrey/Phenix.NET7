Phenix Framework 7 for .net core 3 & Orleans 3
Copyright © 2007, 2020 Phenixヾ Studio

发布地址：https://github.com/phenixiii/Phenix.NET7
技术交流群：206648373


20190522
1，发布轻量级的持久化引擎，支持Oracle、MySQL，封装ADO.NET，可同时操作多个（主库+分库）数据库
2，提供数据库的数据字典的查看方法，示例见Demo.Phenix.Core.Data.Schema
3，提供存放日志到本地或数据库的通用方法，示例见Demo.Phenix.Core.Log.EventLog
4，提供系统唯一的序列号，支持多线程、多进程、分布式应用，示例见Demo.Phenix.Core.Data.Sequence
5，提供连续递增的序列号，支持多线程、多进程、分布式应用，示例见Demo.Phenix.Core.Data.Increment
6，提供直接读取数据库数据DataReader功能，示例见Demo.Phenix.Core.Data.Common.DataReader


20190715
1，持久化引擎支持在实体属性上打System.ComponentModel.DataAnnotations.ValidationAttribute派生标签，提交对象/属性时会自动完成属性的有效性验证（验证失败抛出ValidationException）
      以下默认规范会自动添加，不必手工打标签：
          System.ComponentModel.DataAnnotations.RequiredAttribute，如果属性值不允许为空的规范是按照表字段NOT NULL的话；
          System.ComponentModel.DataAnnotations.StringLengthAttribute，如果字符串属性值长度要求是按照表字段长度规范的话；
     一旦手工打上标签，可覆盖它们
2，持久化引擎支持在实体上实现System.ComponentModel.DataAnnotations.IValidatableObject接口，也可以实现Phenix.Core.Data.Validity.IValidation接口，提交对象时自动完成对象的有效性验证（验证失败抛出ValidationException）
3，提供实体类代码生成工具Phenix.Tools.EntityBuilder工程源码


20190804
1，提供WebAPI服务端Phenix.Services.Host工程源码
2，提供WebAPI服务的phenix7.js客户端源码，见Phenix.Services.Host\wwwroot\lib目录，测试代码见Phenix.Services.Host\wwwroot\test


20190807
1，Phenix.Services.Host可部署在KestrelServer+Docker环境中
2，提供《Phenix.Services.Host.部署方法.doc》文档


20190813
1，Phenix.Core.Data.Database和Phenix.Core.Data.Common.DbCommandHelper的调用存储过程函数ExecuteStoredProc，返回值改为IDictionary<string, object>类型，为存储过程的调用结果集"参数名-参数值"，如需转换为JSON格式请调用Phenix.Core.Reflection.Utilities.JsonSerialize(result)
2，增补Phenix.Core.Data.Schema.Table、Phenix.Core.Data.Schema.View、Phenix.Core.Data.Model.EntityBase<T>的查询函数，可读取DataReader内容返回实体对象或JSON格式的查询结果
3，增补Phenix.Core.Data.Common.DataReader的SelectRecord()函数，直接导出JSON格式的查询结果，JSON格式的属性名为数据源的表/视图的字段名/别名


20190905
1，提供Phenix.Client工程，含HttpClient类Checkin、Logon、ChangePassword、Sequence、Increment、Message、UploadFile、DownloadFile、EventLog、Call等系列函数，示例代码见：Demo.Phenix.Client.HttpClient_Message、Demo.Phenix.Client.HttpClient_File
2，提供Phenix.Business工程，含Phenix.Business.UndoableBase<T>可撤销编辑的实体基类，为实体对象的编辑操作提供单级回滚的功能，示例见Demo.Phenix.Business.UndoableBase
3，约定时间戳字段以'_TIMESTAMP'后缀命名
4，增补Phenix.Core.Data.Model.EntityBase<T>功能具备乐观锁机制，Update()和UpdateRecord()函数提供checkTimestamp参数(默认true)，保证在分布式架构下新数据不会被脏数据覆盖（会抛出Phenix.Core.Data.Validity.OutdatedDataException）


20190911
1，除了主键（后缀'_ID'）、制单人（后缀'_ORIGINATOR'）、制单时间（后缀'_ORIGINATE_TIME'）、制单团体（后缀'_ORIGINATE_TEAMS'）等水印字段外，约定系统自定义的水印字段用后缀'_WM'进行标识，以便在新增记录以后的历次修改中，这些字段都不会再被改动（即使编辑过实体对象也不会被持久化）
2，提供Phenix.Business.BusinessBase<T>可操作聚合树的业务基类，为聚合根对象的整颗聚合树提供编辑操作和持久化的功能
3，一旦为聚合树中某个节点的业务对象打上删除标记（IsSelfDeleted=true），调用SaveDepth()函数持久化时，只要数据库中存在物理外键，将会对它及其下的所有从业务对象（包括未加载到内存）的记录做级联删除


20190920
1，规定将WebAPI服务的Controller代码编写在各自的工程里，程序集的命名以"*.Plugin.dll"作为后缀，默认会被Phenix.Services.Host自动加载并装配到ApplicationParts中
2，发布Phenix.Services.Host时，可自动将Docker相关的文件写入到发布目录（Publish目录）中，方便部署到Docker
3，提供用户消息PULL和PUSH两套方法，具体见测试网页user-message.html


20191011
1，升级至for .net core3.0，开发工具 Visual Studio 2019 16.3.x及以上版本
2，提供服务接口IFileService以扩展系统自身的个性化的文件上传下载功能，框架代码见Phenix.Services.Extend工程里的FileService类，注入方法见Phenix.Services.Host工程Startup类里的AddFileService()代码行，用法见测试网页file.html


20191013
1，修订《Phenix.Services.Host.部署方法.doc》
2，调通Phenix.Services.Host部署在Docker的方法


20191021
1，phenix7.js和Phenix.Client.HttpClient类的Call函数，补充'是否加密上传数据'、'是否解密返回数据'参数
2，提供业务类代码生成工具Phenix.Tools.BusinessBuilder工程源码


20191030
1，新增Phenix.Core.Threading.Timer类，提供定时执行任务功能，通过AddTimedTask()函数添加已实现Phenix.Core.Threading.ITimedTask接口的对象，会自动按照指定周期在一个独立线程里执行这个对象的Execute()函数
2，Phenix.Core.SyncCollections命名空间的集合类，都已实现Phenix.Core.Threading.ITimedTask接口，只要通过AddTimedTask()函数加入到Phenix.Core.Threading.Timer的定时执行任务队列里，会自动按照指定周期清理集合对象里过期的集合项，前提条件是集合项对象需实现Phenix.Core.SyncCollections.ICachedObject接口，指定它的失效时间以自动被从集合中剔除出去


20191102
1，提供非对称加密的公钥私钥生成工具Phenix.Tools.CreateKeyPair工程源码
2，数据库连接串配置记录存放在Phenix.Core.db（推荐使用SQLite Expert工具打开）库文件PH7_Database表里，以便在程序运行时无需通过编写代码注册数据库入口，可直接获取Phenix.Core.Data.Database对象，具体配置方法见示例记录的Remark字段内容
3，注释掉Phenix.Services.Host工程里的数据库入口注册代码，改用Phenix.Core.db库文件PH7_Database表做数据库连接串的配置


20191205
1，提供Phenix.Actor工程源码，封装Orleans3的客户端和服务集群配置方法和入口，以及一套轻量级的Actor开发框架，支持并行和分布式大规模服务架构设计
2，规定将Orleans服务的Grain及其接口代码编写在各自的工程里，程序集的命名以"*.Plugin.dll"作为后缀，默认会被Phenix.Services.Host自动加载并装配到ApplicationParts中
3，提供Phenix.Services.Plugin工程源码，包含用户身份验证和管理的UserGrain类、IUserGrain接口，及其代理UserGrain服务的UserProxy类，通过UserProxyFactory类注册到Phenix.Core的权限控制模块，注册方法（见Phenix.Services.Host）：
         Phenix.Core.Security.Identity.RegisterFactory(new Phenix.Services.Plugin.UserProxyFactory());


20191216
1，升级至for .net core3.1 + SignalR3.1 + Orleans3.1
2，调通Phenix.Services.Host\wwwroot\test目录的测试网页


20191227
1，提供《Phenix.Services.Host.分布式服务架构.pptx》，讲解WebAPI（应用）服务和Orleans（领域）服务的搭建和部署方法
2，提供Phenix.Core.AppSettings应用系统配置工具，配置项定义方法参考Phenix.Services.Host的OrleansConfig类，系统实施时可直接在Phenix.Core.db库文件PH7_AppSettings表里做配置


20200107
1，微调Phenix.Actor工程的功能
2，添加Demo_Practice目录，用于存放实战演练项目的代码
3，添加Demo.InventoryControl库存管控演练项目到Demo_Practice目录
4，InventoryControl演练第一步，完成货架装卸货物的记录功能，见Demo.InventoryControl.Plugin_MySQL工程


20200113
1，提供Phenix.Algorithm工程源码，含ZeroOneKnapsackProblem类的0-1背包算法，用法见Demo.Phenix.Algorithm.CombinatorialOptimization.ZeroOneKnapsackProblem工程
2，完善Phenix.Core.AppSettings类的功能


20200116
1，丰富Phenix.Algorithm工程ZeroOneKnapsackProblem类的功能，添加"打包至少占有一定容量"、"打包至少占有一定容量且不低于一定价值"、"趋向最小规格且不考虑打包价值/只要满足最低打包价值"等约束条件
2，丰富Demo.Phenix.Algorithm.CombinatorialOptimization.ZeroOneKnapsackProblem工程的演示代码


20200205
1，为Phenix.Algorithm工程添加BunchKnapsackProblem类，从M支集束的N个物品中挑选出一个尽可能整支和价值高的子集使其装满容量为W且允许有一定超载范围的背包
2，InventoryControl演练第二步，完成从Area-Alley-Location逐层自动挑货的标记功能，见Demo.InventoryControl.Plugin_MySQL工程


20200213
1，为Phenix.Actor工程封装Orleans Streams功能，见StreamProvider类
2，为Demo.InventoryControl.Plugin_MySQL工程添加Demo.InventoryControl.Plugin.oom设计文档
3，添加Demo.InspectionStation检查站作业演练项目到Demo_Practice目录
4，InspectionStation演练第一步，完成各作业点的地磅和车牌号的数据上报和读取、闸口的放行，作业点动态信息的发布和订阅，见Demo.InspectionStation.Plugin_MySQL工程


20200217
1，升级用户消息发布和订阅功能，允许在单一的消息ID上持续发送消息，可用于数据监控等业务场景，示例代码见：Demo.Phenix.Client.HttpClient_Message
2，为Phenix.Actor工程添加StreamEntityGrainBase类，可支持网格化的消息发布和订阅机制
3，InspectionStation演练第二步，中控的WebAPI客户端可订阅指定的多个作业点的动态信息，通过SignalR的推送机制实时获取到最新数据，见Demo.InspectionStation.Plugin_MySQL工程


20200220
1，修订《Phenix.Services.Host.部署方法.doc》，补充'开发环境的搭建'等章节
2，补充和修订Demo.InspectionStation和Demo.InventoryControl的设计文档
3，提供《Phenix.Services.Host.分布式服务插件.pptx》，讲解WebAPI（应用）服务和Orleans（领域）服务的设计和开发方法


20200224
1，重构Phenix.Core持久层框架，强调聚合和聚合根的领域对象模型，在采取分库分表策略的数据库部署场景下，一棵聚合树里的所有对象都随聚合根对象一起锁定在某个分库上进行持久化，持久化的路由算法是取自聚合根对象里一个映射'_RU'后缀字段的属性值经HASH取余得到具体的分库ID
2，重构Phenix.Core权限控制模块，借助Phenix.Services.Plugin工程实现分布式部署
3，重构Phenix.Actor工程，精简EntityGrainProxyBase仅限于实体Grain的代理功能


20200303
1，梳理Phenix.Core持久层框架
2，提供《Phenix.Core.Data.持久层开发接口.doc》，讲解Phenix.Core持久层框架的数据库集群、主库+分库、分库分表策略、使用接口和持久层开发方法


20200315
1，为Phenix.Services.Host工程添加Dashboard插件，可在浏览器上打开可视化Silo监控工具：http://localhost:8080/
2，完善Phenix.Core.AppSettings功能，类似Phenix.Core.Data.Database.Fetch()函数会自动加密Phenix.Core.db库文件PH7_Database表Password字段值，ReadValue()函数也会加密PH7_AppSettings表Value字段值
3，为Phenix.Core工程添加Plugin功能（命名空间为Phenix.Core.Plugin），用于动态加载和管理包含有实现了IPlugin接口的插件类的程序集
2，修订Phenix.Tools.EntityBuilder、Phenix.Tools.BusinessBuilder代码生成问题，增补'protected override void InitializeSelf()'函数代码生成功能，用于填充表字段默认值


20200408
1，修订《Phenix.Services.Host.部署方法.doc》的"服务组件的开发和部署"章节
2，添加《Phenix.Core.Data.持久层开发接口.doc》的"用DataReader获取实体对象/JSON的Sheet方法"章节
3，修订Phenix.Core.Log.EventLog功能，可防止连续写同一message造成本地日志瞬时暴涨的问题，中断重复日志强度阈值由静态属性BreakRepeatIntensityPerMinute控制，缺省为重复日志超过每分钟6000次
4，修订用户身份验证功能，可防止同一用户高频访问服务，中断服务请求强度阈值由Phenix.Core.Security.User的BreakRequestIntensityPerMinute静态属性控制，缺省为服务请求超过每分钟6000次
5，为Phenix.Actor工程添加TreeEntityGrainBase、StreamTreeEntityGrainBase、TreeEntityGrainProxyBase类，以支持树状结构Kernel的处理
6，丰富Phenix.Services.Plugin工程功能，注册用户可搭建起组织架构成为公司管理员，示例见Demo.Phenix.Client.Security.Identity_MyselfRootTeams


20200510
1，丰富Phenix.Algorithm工程ZeroOneKnapsackProblem、BunchKnapsackProblem的功能，可支持超大规格（容量）背包的运算
2，持久化引擎支持PostgreSQL，解决方案Phenix.NET7_PgSQL.sln，程序集输出目录Bin_PgSQL，配置库Phenix.Core.db已升级


20200516
1，提供Phenix.Core.Data.Schema.Table配置项ClassNameByTrimTableName(默认false)，可根据自己Build Entity的需要设置类名取自被整理(如果第PrefixCount(默认3)位后是"_"则剔去其及之前的字符)的表名
2，提供Phenix.Core.Data.Schema.View配置项ClassNameByTrimViewName(默认false)，可根据自己Build Entity的需要设置类名取自被整理(如果第PrefixCount(默认3)位后是"_"则剔去其及之前的字符, 如果第SuffixCount(默认1)位前是"_"则剔去其及之后的字符)的视图名
3，提供Phenix.Core.Data.Schema.Column配置项FieldNameByTrimColumnName(默认true)，可根据自己Build Entity的需要设置类的字段名和属性名取自被整理(如果第PrefixCount(默认2)位后是"_"则剔去其及之前的字符)的表/视图字段名
4，丰富Phenix.Services.Plugin工程功能，公司管理员可为自己员工注册用户，为其配上所在团队（自己公司组织架构上的某个节点）、所担岗位，锁定/解锁、注销/恢复


20200523
1，丰富Phenix.Services.Plugin工程功能，系统管理员（用户名ADMIN，默认密码ADMIN）可增删改系统的岗位定义
2，适配双活数据中心的Actor状态跨域同步机制


