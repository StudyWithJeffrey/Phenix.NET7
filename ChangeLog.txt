20190522
1，支持Oracle、MySQL，封装ADO.NET，可操作多个数据库，也为系统的分库分表策略提供持久化层面的便利
2，提供数据库的数据字典的查看方法，示例见Demo.Phenix.Core.Data.Schema
3，提供存放日志到本地或数据库的通用方法，示例见Demo.Phenix.Core.Log.EventLog
4，提供系统唯一的序列号，支持多线程、多进程、分布式应用，示例见Demo.Phenix.Core.Data.Sequence
5，提供连续递增的序列号，支持多线程、多进程、分布式应用，示例见Demo.Phenix.Core.Data.Increment
6，提供直接读取数据库数据DataReader功能，示例见Demo.Phenix.Core.Data.Common.DataReader


20190706
1，提供岗位资料类以便用于岗位配置管理，示例见Demo.Phenix.Core.Security.Position，表结构见Phenix Data Model目录Security.sql文件
2，提供团体资料类以便用于组织架构管理，示例见Demo.Phenix.Core.Security.Teams，表结构见Phenix Data Model目录Security.sql文件
3，提供用户资料类以便用于注册用户的权限管理（申请、审核、担任岗位和所属团体），示例见Demo.Phenix.Core.Security.User，表结构见Phenix Data Model目录Security.sql文件


20190711
1，发布轻量级的持久化引擎，入口为Database类，用法参考如下：
         IList<Teams> teamsList = Database.Default.MetaData.FindSheet<Teams>().SelectRecord<Teams>(p => p.Id == 559064445621642);
2，提供EntityBase<T>实体基类，封装持久化引擎、动态刷新等基础设施功能，代码可简化为：
         IList<Teams> teamsList = Team.SelectRecord(p => p.Id == 559064445621642);
      示例见Demo.Phenix.Core.Data.Model.EntityBase
3，持久化引擎支持在实体属性上打System.ComponentModel.DataAnnotations.ValidationAttribute派生标签，提交对象/属性时会自动完成属性的有效性验证（验证失败抛出ValidationException）
      以下默认规范会自动添加，不必手工打标签：
          System.ComponentModel.DataAnnotations.RequiredAttribute，如果属性值不允许为空的规范是按照表字段NOT NULL的话；
          System.ComponentModel.DataAnnotations.StringLengthAttribute，如果字符串属性值长度要求是按照表字段长度规范的话；
     一旦手工打上标签，可覆盖默认规范           
4，持久化引擎支持在实体上实现System.ComponentModel.DataAnnotations.IValidatableObject接口，也可以实现Phenix.Core.Data.Validity.IValidation接口，提交对象时自动完成对象的有效性验证（验证失败抛出ValidationException）


20190715
1，新增Phenix.Extensions目录，存放扩展模块的工程源码
2，在Phenix.Extensions目录里，提供实体类代码生成工具Phenix.EntityBuilder工程源码，分为for Oracle和for MySQL两套工程文件，如需编译Phenix.EntityBuilder_ORA应暂时卸载Phenix.EntityBuilder_MySQL


20190804
1，在Phenix.Extensions目录里，提供WebAPI框架服务端源码，工程见Phenix.WebApplication目录，分为for Oracle和for MySQL两套工程文件，编译时请暂时卸载另一套工程
2，在Phenix.Extensions目录里，提供WebAPI框架客户端（JS）源码，见Phenix.WebApplication.Client.Ajax目录，对应有测试网页见Phenix.WebApplication.Client.Test目录


20190807
1，Phenix.WebApplication可部署在KestrelServer+Docker环境中
2，提供'Phenix.WebApplication.部署方法.doc'文档供参考，见'\Phenix.Extensions\Phenix.WebApplication'目录


20190809
1，提供Phenix.Core.Data.Schema.Table配置项ClassNameByTrimTableName，可根据自己Build Entity的需要，规定ClassName属性的取值是否取自被整理的表名(如果第4位是"_"则剔去其及之前的字符)，默认是false
2，提供Phenix.Core.Data.Schema.View配置项ClassNameByTrimViewName，可根据自己Build Entity的需要，规定ClassName属性的取值是否取自被整理的视图名(如果第4位是"_"则剔去其及之前的字符, 如果倒数第2位是"_"则剔去其及之后的字符)，默认是false
3，Phenix.Core.Data.Database和Phenix.Core.Data.Common.DbCommandHelper的调用存储过程函数ExecuteStoredProc的返回值改为IDictionary<string, object>类型，为存储过程的调用结果集"参数名-参数值"


